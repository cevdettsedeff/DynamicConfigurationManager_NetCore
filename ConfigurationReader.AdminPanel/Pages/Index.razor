@* ConfigurationReader.AdminPanel/Pages/Index.razor *@
@page "/"
@inject ConfigurationApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation

<PageTitle>Configurations</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
    Configuration Management
</MudText>

<MudCard Elevation="2" Class="mb-4">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="_searchString"
                              Label="Search by Name"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true"
                              Clearable="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect @bind-Value="_selectedApplication"
                           Label="Filter by Application"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           T="string">
                    @foreach (var app in _applications)
                    {
                        <MudSelectItem T="string" Value="@app">@app</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="12" md="4" Class="d-flex align-end">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenCreateDialog"
                           FullWidth="true"
                           Size="Size.Large">
                    Add Configuration
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
}

<MudTable Items="@FilteredConfigurations"
          Hover="true"
          Striped="true"
          Dense="true"
          Elevation="2"
          Loading="@_loading"
          LoadingProgressColor="Color.Primary"
          FixedHeader="true"
          Height="calc(100vh - 350px)">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Value</MudTh>
        <MudTh>Application</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Updated</MudTh>
        <MudTh Style="text-align: right;">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudChip T="string" Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Filled.Key">
                @context.Name
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Type">
            <MudChip T="string" Size="Size.Small" Color="@GetTypeColor(context.Type)" Variant="Variant.Outlined">
                @context.Type
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Value">
            <code style="background: #f5f5f5; padding: 4px 8px; border-radius: 4px;">
                @(context.Value.Length > 50 ? context.Value.Substring(0, 50) + "..." : context.Value)
            </code>
        </MudTd>
        <MudTd DataLabel="Application">
            <MudChip T="string" Size="Size.Small" Color="Color.Secondary">
                @context.ApplicationName
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Status">
            @if (context.IsActive)
            {
                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                    Active
                </MudChip>
            }
            else
            {
                <MudChip T="string" Size="Size.Small" Color="Color.Default" Icon="@Icons.Material.Filled.Cancel">
                    Inactive
                </MudChip>
            }
        </MudTd>
        <MudTd DataLabel="Updated">
            <MudText Typo="Typo.caption">
                @context.UpdatedAt.ToString("yyyy-MM-dd HH:mm")
            </MudText>
        </MudTd>
        <MudTd DataLabel="Actions" Style="text-align: right;">
            <MudTooltip Text="Edit">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="@(() => OpenEditDialog(context))" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="@(() => DeleteConfiguration(context.Id))" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="my-8">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Default" Class="mb-2" />
            <br />
            No configurations found. Add your first configuration!
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText Align="Align.Center">Loading configurations...</MudText>
    </LoadingContent>
</MudTable>

<MudText Typo="Typo.caption" Class="mt-2">
    Total: @FilteredConfigurations.Count() configuration(s)
</MudText>

@code {
    private List<ConfigurationItemDto> _configurations = new();
    private List<string> _applications = new();
    private bool _loading = true;
    private string _searchString = string.Empty;
    private string? _selectedApplication = null;

    private IEnumerable<ConfigurationItemDto> FilteredConfigurations
    {
        get
        {
            return _configurations.Where(c =>
            {
                var matchesSearch = string.IsNullOrWhiteSpace(_searchString) ||
                                   c.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);

                var matchesApp = string.IsNullOrWhiteSpace(_selectedApplication) ||
                                c.ApplicationName == _selectedApplication;

                return matchesSearch && matchesApp;
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        try
        {
            _configurations = await ApiService.GetAllAsync();
            _applications = await ApiService.GetApplicationNamesAsync();
            Snackbar.Add($"Loaded {_configurations.Count} configurations", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetTypeColor(string type) => type.ToLower() switch
    {
        "string" => Color.Primary,
        "int" => Color.Success,
        "bool" => Color.Warning,
        "double" => Color.Info,
        _ => Color.Default
    };

    private async Task OpenCreateDialog()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true
        };

        var dialog = await DialogService.ShowAsync<CreateConfigurationDialog>("", options);
        var result = await dialog.Result;

        // ✅ Canceled kontrolü
        if (result is { Canceled: false })
        {
            await LoadData();
        }
    }

    private async Task OpenEditDialog(ConfigurationItemDto item)
    {
        var parameters = new DialogParameters<EditConfigurationDialog>
        {
            { x => x.Configuration, item }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true
        };

        var dialog = await DialogService.ShowAsync<EditConfigurationDialog>("", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadData();
        }
    }

    private async Task DeleteConfiguration(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this configuration?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            var success = await ApiService.DeleteAsync(id);
            if (success)
            {
                Snackbar.Add("Configuration deleted successfully", Severity.Success);
                await LoadData();
            }
            else
            {
                Snackbar.Add("Failed to delete configuration", Severity.Error);
            }
        }
    }
}